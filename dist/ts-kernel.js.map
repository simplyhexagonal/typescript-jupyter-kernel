{
  "version": 3,
  "sources": ["../node_modules/.pnpm/short-unique-id@4.4.4/node_modules/short-unique-id/src/index.ts", "../node_modules/.pnpm/dotenv@16.0.0/node_modules/dotenv/lib/main.js", "../src/index.ts", "../src/cli/index.ts", "../src/threads/main/index.ts", "../src/threads/heartbeat/index.ts", "../src/threads/shell/index.ts", "../src/utils/index.ts", "../src/threads/shell/kernelInfoReply.ts", "../src/threads/shell/executeReply.ts"],
  "sourcesContent": ["// @module ShortUniqueId\n\n// Copyright 2017-2021 the Short Unique ID authors. All rights reserved. Apache 2.0 license.\n\n// @ts-ignore\nimport {version} from '../package.json';\n\ninterface ShortUniqueIdRanges {\n  [k: string]: [number, number];\n};\n\ntype defaultDictionaries = 'number' | 'alpha' | 'alpha_lower' | 'alpha_upper' | 'alphanum' | 'alphanum_lower' | 'alphanum_upper' | 'hex';\n\n/**\n * ```js\n * {\n *   dictionary: ['z', 'a', 'p', 'h', 'o', 'd', ...],\n *   shuffle: false,\n *   debug: false,\n *   length: 6,\n * }\n * ```\n */\nexport interface ShortUniqueIdOptions {\n  /** User-defined character dictionary */\n  dictionary: string[] | defaultDictionaries;\n\n  /** If true, sequentialUUID use the dictionary in the given order */\n  shuffle: boolean;\n\n  /** If true the instance will console.log useful info */\n  debug: boolean;\n\n  /** From 1 to infinity, the length you wish your UUID to be */\n  length: number;\n};\n\n/**\n * 6 was chosen as the default UUID length since for most cases\n * it will be more than aptly suitable to provide millions of UUIDs\n * with a very low probability of producing a duplicate UUID.\n *\n * For example, with a dictionary including digits from 0 to 9,\n * as well as the alphabet from a to z both in UPPER and lower case,\n * the probability of generating a duplicate in 1,000,000 rounds\n * is ~0.00000002, or about 1 in 50,000,000.\n */\nexport const DEFAULT_UUID_LENGTH: number = 6;\n\nconst DEFAULT_OPTIONS: ShortUniqueIdOptions = {\n  dictionary: 'alphanum',\n  shuffle: true,\n  debug: false,\n  length: DEFAULT_UUID_LENGTH,\n};\n\n/**\n * Generate random or sequential UUID of any length.\n *\n * ### Use as module\n *\n * ```js\n * // Deno (web module) Import\n * import ShortUniqueId from 'https://cdn.jsdelivr.net/npm/short-unique-id@latest/src/index.ts';\n *\n * // ES6 / TypeScript Import\n * import ShortUniqueId from 'short-unique-id';\n *\n * //or Node.js require\n * const ShortUniqueId = require('short-unique-id');\n *\n * //Instantiate\n * const uid = new ShortUniqueId();\n *\n * // Random UUID\n * console.log(uid());\n *\n * // Sequential UUID\n * console.log(uid.seq());\n * ```\n *\n * ### Use in browser\n *\n * ```html\n * <!-- Import -->\n * <script src=\"https://cdn.jsdelivr.net/npm/short-unique-id@latest/dist/short-unique-id.min.js\"></script>\n *\n * <!-- Usage -->\n * <script>\n *   // Instantiate\n *   var uid = new ShortUniqueId();\n *\n *   // Random UUID\n *   document.write(uid());\n *\n *   // Sequential UUID\n *   document.write(uid.seq());\n * </script>\n * ```\n *\n * ### Options\n *\n * Options can be passed when instantiating `uid`:\n *\n * ```js\n * const options = { ... };\n *\n * const uid = new ShortUniqueId(options);\n * ```\n *\n * For more information take a look at the [ShortUniqueIdOptions type definition](/interfaces/shortuniqueidoptions.html).\n */\nexport default class ShortUniqueId extends Function {\n  static default: typeof ShortUniqueId = ShortUniqueId;\n\n  public counter: number;\n  public debug: boolean;\n  public dict: string[];\n  public version: string;\n  public dictIndex: number = 0;\n  public dictRange: number[] =[];\n  public lowerBound: number = 0;\n  public upperBound: number = 0;\n  public dictLength: number = 0;\n  public uuidLength: number;\n\n  protected _digit_first_ascii: number = 48;\n  protected _digit_last_ascii: number = 58;\n  protected _alpha_lower_first_ascii: number = 97;\n  protected _alpha_lower_last_ascii: number = 123;\n  protected _hex_last_ascii: number = 103;\n  protected _alpha_upper_first_ascii: number = 65;\n  protected _alpha_upper_last_ascii: number = 91;\n\n  protected _number_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n  };\n\n  protected _alpha_dict_ranges: ShortUniqueIdRanges = {\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alpha_lower_dict_ranges: ShortUniqueIdRanges = {\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n  };\n\n  protected _alpha_upper_dict_ranges: ShortUniqueIdRanges = {\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alphanum_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alphanum_lower_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n  };\n\n  protected _alphanum_upper_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _hex_dict_ranges: ShortUniqueIdRanges = {\n    decDigits: [this._digit_first_ascii, this._digit_last_ascii],\n    alphaDigits: [this._alpha_lower_first_ascii, this._hex_last_ascii],\n  };\n\n  /* tslint:disable consistent-return */\n  protected log = (...args: any[]): void => {\n    const finalArgs = [...args];\n    finalArgs[0] = `[short-unique-id] ${args[0]}`;\n    /* tslint:disable no-console */\n    if (this.debug === true) {\n      if (typeof console !== 'undefined' && console !== null) {\n        return console.log(...finalArgs);\n      }\n    }\n    /* tslint:enable no-console */\n  };\n  /* tslint:enable consistent-return */\n\n  /** Change the dictionary after initialization. */\n  setDictionary = (dictionary: string[] | defaultDictionaries, shuffle?: boolean): void => {\n    let finalDict: string[];\n\n    if (dictionary && Array.isArray(dictionary) && dictionary.length > 1) {\n      finalDict = dictionary as string[];\n    } else {\n      finalDict = [];\n\n      let i;\n\n      this.dictIndex = i = 0;\n\n      const rangesName = `_${dictionary as defaultDictionaries}_dict_ranges`;\n      const ranges: ShortUniqueIdRanges = this[rangesName as keyof ShortUniqueId];\n\n      Object.keys(ranges).forEach((rangeType) => {\n        const rangeTypeKey = rangeType;\n\n        this.dictRange = ranges[rangeTypeKey];\n\n        this.lowerBound = this.dictRange[0];\n        this.upperBound = this.dictRange[1];\n\n        for (\n          this.dictIndex = i = this.lowerBound;\n          this.lowerBound <= this.upperBound ? i < this.upperBound : i > this.upperBound;\n          this.dictIndex = this.lowerBound <= this.upperBound ? i += 1 : i -= 1\n        ) {\n          finalDict.push(String.fromCharCode(this.dictIndex));\n        }\n      });\n    }\n\n    if (shuffle) {\n      // Shuffle Dictionary to remove selection bias.\n      const PROBABILITY = 0.5;\n      finalDict = finalDict.sort(() => Math.random() - PROBABILITY);\n    }\n\n    this.dict = finalDict;\n\n    // Cache Dictionary Length for future usage.\n    this.dictLength = this.dict.length;// Resets internal counter.\n    this.counter = 0;\n  };\n\n  seq = (): string => {\n    return this.sequentialUUID();\n  };\n\n  /**\n   * Generates UUID based on internal counter that's incremented after each ID generation.\n   * @alias `const uid = new ShortUniqueId(); uid.seq();`\n   */\n  sequentialUUID = (): string => {\n    let counterDiv: number;\n    let counterRem: number;\n    let id: string = '';\n\n    counterDiv = this.counter;\n\n    do {\n      counterRem = counterDiv % this.dictLength;\n      counterDiv = Math.trunc(counterDiv / this.dictLength);\n      id += this.dict[counterRem];\n    } while (counterDiv !== 0);\n\n    this.counter += 1;\n\n    return id;\n  };\n\n  /**\n   * Generates UUID by creating each part randomly.\n   * @alias `const uid = new ShortUniqueId(); uid(uuidLength: number);`\n   */\n  randomUUID = (uuidLength: number = this.uuidLength || DEFAULT_UUID_LENGTH): string => {\n    let id: string;\n    let randomPartIdx: number;\n    let j: number;\n\n    if ((uuidLength === null || typeof uuidLength === 'undefined') || uuidLength < 1) {\n      throw new Error('Invalid UUID Length Provided');\n    }\n\n    const isPositive = uuidLength >= 0;\n\n    // Generate random ID parts from Dictionary.\n    id = '';\n    for (\n      j = 0;\n      j < uuidLength;\n      j += 1\n    ) {\n      randomPartIdx = parseInt(\n        (Math.random() * this.dictLength).toFixed(0),\n        10,\n      ) % this.dictLength;\n      id += this.dict[randomPartIdx];\n    }\n\n    // Return random generated ID.\n    return id;\n  };\n\n  /**\n   * Calculates total number of possible UUIDs.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs\n   * - `n` is the number of unique characters in the dictionary\n   * - `l` is the UUID length\n   *\n   * Then `H` is defined as `n` to the power of `l`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%20H=n%5El)\n   *\n   * This function returns `H`.\n   */\n  availableUUIDs = (uuidLength: number = this.uuidLength): number => {\n    return parseFloat(\n      Math.pow([...new Set(this.dict)].length, uuidLength).toFixed(0),\n    );\n  };\n\n  /**\n   * Calculates approximate number of hashes before first collision.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   * - the expected number of values we have to choose before finding the\n   * first collision can be expressed as the quantity `Q(H)`\n   *\n   * Then `Q(H)` can be approximated as the square root of the product of half\n   * of pi times `H`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%20Q(H)%5Capprox%5Csqrt%7B%5Cfrac%7B%5Cpi%7D%7B2%7DH%7D)\n   *\n   * This function returns `Q(H)`.\n   * \n   * (see [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution))\n   */\n  approxMaxBeforeCollision = (rounds: number = this.availableUUIDs(this.uuidLength)): number => {\n    return parseFloat(\n      Math.sqrt((Math.PI / 2) * rounds).toFixed(20),\n    );\n  };\n\n  /**\n   * Calculates probability of generating duplicate UUIDs (a collision) in a\n   * given number of UUID generation rounds.\n   *\n   * Given that:\n   *\n   * - `r` is the maximum number of times that `randomUUID()` will be called,\n   * or better said the number of _rounds_\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   *\n   * Then the probability of collision `p(r; H)` can be approximated as the result\n   * of dividing the square root of the product of half of pi times `r` by `H`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%20p(r%3B%20H)%5Capprox%5Cfrac%7B%5Csqrt%7B%5Cfrac%7B%5Cpi%7D%7B2%7Dr%7D%7D%7BH%7D)\n   *\n   * This function returns `p(r; H)`.\n   * \n   * (see [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution))\n   *\n   * (Useful if you are wondering _\"If I use this lib and expect to perform at most\n   * `r` rounds of UUID generations, what is the probability that I will hit a duplicate UUID?\"_.)\n   */\n  collisionProbability = (\n    rounds: number = this.availableUUIDs(this.uuidLength),\n    uuidLength: number = this.uuidLength,\n  ): number => {\n    return parseFloat(\n      (\n        this.approxMaxBeforeCollision(rounds) / this.availableUUIDs(uuidLength)\n      ).toFixed(20),\n    );\n  };\n\n  /**\n   * Calculate a \"uniqueness\" score (from 0 to 1) of UUIDs based on size of\n   * dictionary and chosen UUID length.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   * - `Q(H)` is the approximate number of hashes before first collision,\n   * or in terms of this library, the result of running `approxMaxBeforeCollision()`\n   *\n   * Then `uniqueness` can be expressed as the additive inverse of the probability of\n   * generating a \"word\" I had previously generated (a duplicate) at any given iteration\n   * up to the the total number of possible UUIDs expressed as the quotiend of `Q(H)` and `H`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%201-%5Cfrac%7BQ(H)%7D%7BH%7D)\n   *\n   * (Useful if you need a value to rate the \"quality\" of the combination of given dictionary\n   * and UUID length. The closer to 1, higher the uniqueness and thus better the quality.)\n   */\n  uniqueness = (rounds: number = this.availableUUIDs(this.uuidLength)): number => {\n    const score = parseFloat(\n      (1 - (\n        this.approxMaxBeforeCollision(rounds) / rounds\n      )).toFixed(20),\n    );\n    return (\n      score > 1\n    ) ? (\n      1\n    ) : (\n      (score < 0) ? 0 : score\n    );\n  };\n\n  /**\n   * Return the version of this module.\n   */\n  getVersion = (): string => {\n    return this.version;\n  };\n\n  /**\n   * Generates a UUID with a timestamp that can be extracted using `uid.parseStamp(stampString);`.\n   * \n   * ```js\n   *  const uidWithTimestamp = uid.stamp(32);\n   *  console.log(uidWithTimestamp);\n   *  // GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n   * \n   *  console.log(uid.parseStamp(uidWithTimestamp));\n   *  // 2021-05-03T06:24:58.000Z\n   *  ```\n   */\n  stamp = (finalLength: number): string => {\n    if (typeof finalLength !== 'number' || finalLength < 10) {\n      throw new Error('Param finalLength must be number greater than 10');\n    }\n\n    const hexStamp = Math.floor(+new Date() / 1000).toString(16);\n\n    const idLength = finalLength - 9;\n\n    const rndIdx = Math.round(Math.random() * ((idLength > 15) ? 15 : idLength));\n\n    const id = this.randomUUID(idLength);\n\n    return `${id.substr(0, rndIdx)}${hexStamp}${id.substr(rndIdx)}${rndIdx.toString(16)}`;\n  };\n\n  /**\n   * Extracts the date embeded in a UUID generated using the `uid.stamp(finalLength);` method.\n   * \n   * ```js\n   *  const uidWithTimestamp = uid.stamp(32);\n   *  console.log(uidWithTimestamp);\n   *  // GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n   * \n   *  console.log(uid.parseStamp(uidWithTimestamp));\n   *  // 2021-05-03T06:24:58.000Z\n   *  ```\n   */\n  parseStamp = (stamp: string): Date => {\n    if (stamp.length < 10) {\n      throw new Error('Stamp length invalid');\n    }\n\n    const rndIdx = parseInt(stamp.substr(stamp.length - 1, 1), 16);\n\n    return new Date(parseInt(stamp.substr(rndIdx, 8), 16) * 1000);\n  };\n\n  constructor(argOptions: Partial<ShortUniqueIdOptions> = {}) {\n    super();\n\n    const options: ShortUniqueIdOptions = {\n      ...DEFAULT_OPTIONS,\n      ...argOptions as Partial<ShortUniqueIdOptions>,\n    };\n\n    this.counter = 0;\n    this.debug = false;\n    this.dict = [];\n    this.version = version;\n\n    const {\n      dictionary,\n      shuffle,\n      length,\n    } = options;\n\n    this.uuidLength = length;\n\n    this.setDictionary(dictionary, shuffle);\n\n    this.debug = options.debug;\n    this.log(this.dict);\n    this.log((`Generator instantiated with Dictionary Size ${this.dictLength}`));\n\n    return new Proxy(this, {\n      apply: (target, that, args) => this.randomUUID(...args),\n    });\n  }\n}\n", "const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parser src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _log (message) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n", "require('dotenv').config();\n\nimport MonoContext from '@simplyhexagonal/mono-context';\nimport Logger from '@simplyhexagonal/logger';\n\nimport cli from './cli';\nimport main from './threads/main';\nimport heartbeat from './threads/heartbeat';\nimport shell from './threads/shell';\nimport { KernelConfig } from './interfaces';\n\nconst logger = new Logger({});\n\nMonoContext.setState({\n  logger,\n});\n\nexport default async () => {\n  await cli();\n\n  const jupyterConfigPath = process.argv[2] || process.env.JUPYTER_CONFIG_PATH || '';\n  const jupyterConfig = require(jupyterConfigPath) as KernelConfig;\n\n  const threadName = process.env.TS_KERNEL_THREAD || '';\n\n  if (!['heartbeat', 'control', 'shell'].includes(threadName)) {\n    return main(jupyterConfigPath, jupyterConfig);\n  }\n\n  switch (threadName) {\n    case 'heartbeat':\n      heartbeat(jupyterConfig);\n      break;\n    case 'shell':\n      shell(jupyterConfig);\n      break;\n  }\n}\n", "import { resolve } from 'path';\nimport {\n  statSync,\n  mkdirSync,\n  writeFileSync,\n  readFileSync,\n} from 'fs';\nimport MonoContext from '@simplyhexagonal/mono-context';\n\nexport default async () => {\n  const logger = MonoContext.getStateValue('logger');\n\n  if (process.argv[2] === '--version') {\n    console.log(require(resolve(__dirname, '../package.json')).version);\n\n    process.exit(0);\n  }\n\n  if (process.argv[2] === 'install') {\n    const possiblePaths = [\n      `${process.env.HOME}/.local/share/jupyter/kernels`, // Linux\n      `${process.env.HOME}/Library/Jupyter/kernels`, // Mac\n      `${process.env.APPDATA}/jupyter/kernels`, // Windows\n    ];\n\n    let kernelsPath = '';\n\n    logger.info(\n      'Looking for kernels directory in:\\n\\n\\t',\n      possiblePaths.map((p) => p.replace('undefined', '%APPDATA%')).join('\\n\\t ')\n    );\n\n    try {\n      kernelsPath = possiblePaths.find((path) => statSync(path).isDirectory()) as string;\n    } catch (e) {\n      await logger.error('Could not find kernels path!');\n\n      process.exit(10);\n    }\n\n    const installFilePath = `${kernelsPath}/typescript/kernel.json`;\n\n    await logger.info('Found kernels path:', kernelsPath, '\\n\\nInstalling Typescript kernel to:', installFilePath);\n\n    try {\n      mkdirSync(`${kernelsPath}/typescript`, { recursive: true });\n\n      writeFileSync(\n        installFilePath,\n        readFileSync(resolve(__dirname, '../kernel.json'))\n      );\n    } catch (e) {\n      await logger.error('Could not install kernel!', e);\n\n      process.exit(15);\n    }\n\n    await logger.info('Installed kernel successfully!');\n\n    process.exit(0);\n  }\n}", "import { resolve as resolvePath } from 'path';\nimport { fork } from 'child_process';\nimport MonoContext from '@simplyhexagonal/mono-context';\n\nimport { KernelConfig } from '../../interfaces';\n\nconst startThread = (\n  threadName: string,\n  jupyterConfigPath: string,\n  reject: (e?: any) => void\n) => {\n  const logger = MonoContext.getStateValue('logger');\n\n  const tsKernelPath = resolvePath(__dirname, '..', 'bin', 'ts-kernel');\n\n  const thread = fork(\n    tsKernelPath,\n    {\n      env: {\n        ...process.env,\n        NODE_OPTIONS: (threadName === 'shell') ? '' : '--max-old-space-size=256',\n        TS_KERNEL_THREAD: threadName,\n        JUPYTER_CONFIG_PATH: jupyterConfigPath,\n      },\n    },\n  );\n\n  thread.on('error', (e) => {\n    logger.error('Heartbeat thread error:', e);\n\n    reject(e);\n  });\n\n  thread.on('exit', (code) => {\n    if (code !== 0) {\n      const errorMessage = `Thread stopped with exit code ${code}`;\n\n      logger.error(errorMessage);\n\n      reject(new Error(errorMessage));\n    }\n  });\n};\n\nexport default async (\n  jupyterConfigPath: string,\n  jupyterConfig: KernelConfig,\n) => {\n  const logger = MonoContext.getStateValue('logger');\n\n  await logger.info('Starting Typescript kernel with config:', jupyterConfig);\n\n  return new Promise<void>(({}, reject) => {\n    startThread('heartbeat', jupyterConfigPath, reject);\n    startThread('control', jupyterConfigPath, reject);\n    startThread('shell', jupyterConfigPath, reject);\n  });\n}\n", "import MonoContext from '@simplyhexagonal/mono-context';\nimport zmq from 'zeromq';\n\nimport { KernelConfig } from '../../interfaces';\n\nexport default (jupyterConfig: KernelConfig) => {\n  const logger = MonoContext.getStateValue('logger');\n\n  logger.info('Heartbeat thread started');\n\n  const heartbeatSocket = zmq.socket('rep');\n\n  heartbeatSocket.bindSync(`tcp://${jupyterConfig.ip}:${jupyterConfig.hb_port}`);\n\n  heartbeatSocket.on('message', async (msg) => {\n    heartbeatSocket.send(msg);\n  });\n}\n", "import MonoContext from '@simplyhexagonal/mono-context';\n\nimport { KernelConfig } from '../../interfaces';\n\nimport kernelInfoReply from './kernelInfoReply';\nimport executeReply from './executeReply';\n\nconst reqResMap: {[k: string]: (a: any) => void} = {\n  'kernel_info_request': kernelInfoReply,\n  'execute_request': executeReply,\n};\n\nexport default ({ip, shell_port, iopub_port, key}: KernelConfig) => {\n  const zmq = require('zeromq');\n\n  const logger = MonoContext.getStateValue('logger');\n\n  logger.info('Shell thread started');\n\n  const shellSocket = zmq.socket('router');\n  const ioSocket = zmq.socket('pub');\n\n  shellSocket.bindSync(`tcp://${ip}:${shell_port}`);\n  ioSocket.bindSync(`tcp://${ip}:${iopub_port}`);\n\n  shellSocket.on('message', async (\n    zmqIdentities: Buffer,\n    delimiter: Buffer,\n    hmacSignature: Buffer,\n    rawHeader: Buffer,\n    rawParentHeader: Buffer,\n    rawMetadata: Buffer,\n    rawContent: Buffer,\n  ) => {\n    const {\n      msg_type: msgType,\n      session,\n      version,\n    } = JSON.parse(rawHeader.toString('ascii'));\n    // const parentHeader = JSON.parse(rawParentHeader.toString('ascii'));\n    // const metadata = JSON.parse(rawMetadata.toString('ascii'));\n    const content = JSON.parse(rawContent.toString('ascii'));\n\n    // await logger.debug('Shell received:', [\n    //   zmqIdentities,\n    //   delimiter,\n    //   hmacSignature,\n    //   rawHeader,\n    //   rawParentHeader,\n    //   rawMetadata,\n    //   rawContent,\n    // ].map(x => x.toString()));\n\n    reqResMap[msgType]({\n      shellSocket,\n      ioSocket,\n      key,\n      session,\n      version,\n      rawHeader,\n      content,\n      zmqIdentities,\n      delimiter,\n    });\n  });\n}\n", "\nimport { createHmac } from 'crypto';\nimport { Socket } from 'zeromq';\nimport ShortUniqueId from 'short-unique-id';\n\nimport { KernealHeader } from '../interfaces';\n\nexport const uid = new ShortUniqueId();\n\nlet msgConsecutive = 0;\n\nexport const instanceUid = uid(24);\nexport const hexStamp = Math.floor(+new Date() / 1e3).toString(16);\n\nexport const msgUid = () => {\n  msgConsecutive += 1;\n\n  return `${hexStamp}-${instanceUid}_${msgConsecutive}`;\n};\n\nexport const send = (\n  socket: Socket,\n  {\n    key,\n    header,\n    parentHeader,\n    metadata = {},\n    content,\n    zmqIdentities,\n    delimiter,\n  }: {\n    key: string;\n    header: KernealHeader;\n    metadata?: any;\n    content: any;\n    parentHeader: Buffer;\n    zmqIdentities: Buffer;\n    delimiter: Buffer;\n  }\n) => {\n  const reply = [\n    Buffer.from(JSON.stringify(header), 'ascii'),\n    parentHeader,\n    Buffer.from(JSON.stringify(metadata), 'ascii'),\n    Buffer.from(JSON.stringify(content), 'ascii'),\n  ];\n\n  const replySignature = createHmac('sha256', key);\n\n  reply.forEach(x => replySignature.update(x));\n\n  reply.unshift(\n    Buffer.from(replySignature.digest('hex'), 'ascii')\n  );\n  reply.unshift(delimiter);\n  reply.unshift(zmqIdentities);\n\n  socket.send(reply);\n};\n\nexport const makeHeader = (\n  msg_type: string,\n  session: string,\n  version: string,\n): KernealHeader => ({\n  msg_type,\n  session,\n  version,\n  msg_id: msgUid(),\n  username: 'kernel',\n  date: new Date().toISOString(),\n});\n", "import { Socket } from 'zeromq';\n\nimport {\n  send,\n  makeHeader,\n} from '../../utils';\n\n// @ts-ignore\nimport { version as implementation_version } from '../../../package.json';\n\nexport default (\n  {\n    shellSocket,\n    ioSocket,\n    key,\n    session,\n    version,\n    rawHeader,\n    zmqIdentities,\n    delimiter,\n  }: {\n    shellSocket: Socket,\n    ioSocket: Socket,\n    key: string,\n    session: string,\n    version: string,\n    rawHeader: Buffer,\n    zmqIdentities: Buffer,\n    delimiter: Buffer,\n  }\n) => {\n  const content = {\n    status: 'ok',\n    protocol_version: '5.0',\n    implementation: 'typescript',\n    implementation_version,\n    language_info: {\n      name: 'typescript',\n      version: '1.0',\n      mimetype: 'text/x-typescript',\n      file_extension: '.ts',\n      pygments_lexer: 'ts',\n      codemirror_mode: 'ts',\n      nbconvert_exporter: '',\n    },\n    banner: '',\n    debugger: false,\n  };\n\n  send(\n    shellSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'kernel_info_reply',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      content,\n      zmqIdentities,\n      delimiter,\n    }\n  );\n\n  send(\n    ioSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'status',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      content: {\n        execution_state: 'idle',\n      },\n      zmqIdentities,\n      delimiter,\n    }\n  );\n}\n", "import { resolve } from 'path';\nimport {\n  writeFileSync,\n  rmSync,\n} from 'fs';\nimport MonoContext from '@simplyhexagonal/mono-context';\nimport exec from '@simplyhexagonal/exec';\nimport { Socket } from 'zeromq';\nimport {\n  send,\n  makeHeader,\n  instanceUid,\n} from '../../utils';\n\nlet executionCount = 0;\n\nexport default async (\n  {\n    shellSocket,\n    ioSocket,\n    key,\n    session,\n    version,\n    rawHeader,\n    content: reqContent,\n    zmqIdentities,\n    delimiter,\n  }: {\n    shellSocket: Socket,\n    ioSocket: Socket,\n    key: string,\n    session: string,\n    version: string,\n    rawHeader: Buffer,\n    content: any,\n    zmqIdentities: Buffer,\n    delimiter: Buffer,\n  }\n) => {\n  const logger = MonoContext.getStateValue('logger');\n\n  executionCount += 1;\n\n  let content: any = {\n    execution_state: 'busy',\n  };\n\n  send(\n    ioSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'status',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      content,\n      zmqIdentities,\n      delimiter,\n    }\n  );\n\n  content = {\n    execution_count: executionCount,\n    code: reqContent.code,\n  };\n\n  send(\n    ioSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'execute_input',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      content,\n      zmqIdentities,\n      delimiter,\n    }\n  );\n\n  // content = {\n  //   name: 'stdout',\n  //   text: 'Hello, world!',\n  // };\n\n  // send(\n  //   ioSocket,\n  //   {\n  //     key: key,\n  //     header: makeHeader(\n  //       'stream',\n  //       session,\n  //       version,\n  //     ),\n  //     parentHeader: rawHeader,\n  //     content,\n  //     zmqIdentities,\n  //     delimiter,\n  //   }\n  // );\n\n  const tempTsFile = resolve(process.cwd(), `._${instanceUid}-${executionCount}.ts`);\n\n  writeFileSync(\n    tempTsFile,\n    reqContent.code,\n  );\n\n  const { exitCode, stdoutOutput, stderrOutput } = await exec(\n    `${resolve(__dirname, '..', 'node_modules', '.bin', 'ts-node')} --swc ${tempTsFile}`,\n  ).catch(\n    async (e) => {\n      await logger.error(e);\n      return e;\n    }\n  );\n\n  rmSync(tempTsFile);\n\n  content = {\n    execution_count: executionCount,\n    data: { 'text/html': exitCode ? `<div style=\"border: 1px solid red; padding: 20px; background: #ffaaaa;\"><pre>${stderrOutput}</pre></div>` : stdoutOutput },\n    metadata: {},\n  };\n\n  send(\n    ioSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'execute_result',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      content,\n      zmqIdentities,\n      delimiter,\n    }\n  );\n  \n  content = {\n    execution_state: 'idle',\n  };\n\n  send(\n    ioSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'status',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      content,\n      zmqIdentities,\n      delimiter,\n    }\n  );\n\n  const metadata = {\n    dependencies_met: true,\n    engine: instanceUid,\n    status: 'ok',\n    started: new Date().toISOString(),\n  };\n\n  content = {\n    status: 'ok',\n    execution_count: executionCount,\n    user_variables: {},\n    payload: [],\n    user_expressions: {},\n  };\n\n  send(\n    shellSocket,\n    {\n      key: key,\n      header: makeHeader(\n        'kernel_info_reply',\n        session,\n        version,\n      ),\n      parentHeader: rawHeader,\n      metadata,\n      content,\n      zmqIdentities,\n      delimiter,\n    }\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
